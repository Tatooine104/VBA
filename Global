' - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + -
' Îïèñàíèå: Ñêðèïòû îáùåãî íàçíà÷åíèÿ
' Êîìïàíèÿ: ÎÎÎ "Ëåíòà"
' Îòäåë:    Ãðóïïà ïî âåäåíèþ áàçû äàííûõ
' Àâòîð:    Øåâ÷åíêî Äìèòðèé <dmitry.shevchenko@lenta.com>
' - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + -
Private Const ModuleVersion As Double = 1.001 ' Íîìåð âåðñèè ìîäóëÿ
' Îáíîâëåí: 2020.03.24 16:07:16 dmitry.shevchenko: Îáíîâëåíèå ýêðàíà - èñïðàâèë îòêëþ÷åíèå ôîðìóë
' - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - +
Public Sub sc_Global_Data_Manipulate(ByRef DataTable As Variant, _
                                     ByVal DataSheet As Object, _
                                     ByVal ColsNames As Variant, _
                                     ByVal CalcCols As Variant, _
                                     ByVal ColsFormats As Variant, _
                                     Optional ByVal PickUp As Boolean = True, _
                                     Optional ByVal ColsCheck As Boolean = True)
' Ñîçäàíî: 2020.02.27 13:06:31
' Àâòîð: dmitry.shevchenko
' <summary> Ïîäõâàòü äàííûõ ñ ëèñòà èëè âñòàâêà äàííûõ íà ëèñò </summary>
' <param name="DataTable"> Ìàññèâ äàííûõ êóäà áóäåì âñòàâëÿòü äàííûå ñ ëèñòà, èëè îòêóäà áóäåì âñòàâëÿòü äàííûå íà ëèñò </param>
' <param name="DataSheet"> Ëèñò ñ êîòîðûì áóäåì âçàèìîäåéñòâîâàòü </param>
' <param name="ColsNames"> Ìàññèâ èìåí êîëîíîê êîòîðûå áóäåì áðàòü ñ ëèñòà. Êîëè÷åñòâî â äîëæíî ñîâïàäàòü ñ ðàçìåðîì DataTable </param>
' <param name="CalcCols"> Èìåíà ñòîëáöîâ êîòîðûå âñòàâëÿòü è/èëè ðàñ÷òåíûõ ñòîëáöîâ êîòîðûå íóæíî ïðîâåðèòü </param>
' <param name="ColsFormats"> Ìàññèâ ôîðìàòîâ âñòàâëÿåìûõ ñòîëáöîâ. Ïî êîëè÷åñòâó ýëåìåíòîâ äîëæåí áûòü èäåíòè÷åí ColsNames </param>
' <param name="PickUp"> Ìåòêà ñîâåðøàåìîãî äåéñòâèÿ. True - ïîäõâàò äàííûõ ñ ëèñòà. False - âñòàâêà äàííûõ íà ëèñò </param>
' <param name="ColsCheck"> Ìåòêà ïðîâåðêè ðàñ÷åòíûõ ñòîëáöîâ. Åñëè ñòîëáåö ñóùåñòâóåò îí î÷èùàåòñÿ îò äàííûõ </param>

On Error GoTo sc_Global_Data_Manipulate_Error ' Ïðè îøèáêå ïåðåõîä ïî ìåòêå
' -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -

ReDim borders(1) As Long: borders = fn_Global_Get_Edges(DataSheet, ColsNames(0)) ' Îïðåäåëÿåì ïåðâóþ è ïîñëåäíèè ñòðîêè â òàáëèöå

Dim checkcol As Boolean ' Ëîãè÷åñêîå ïîëå äëÿ ìåòêè ïðîâåðÿòü êîëîíêó ïåðåä ðàáîòîé ñ íåé

For ind& = LBound(DataTable) To UBound(DataTable) ' Ïåðåáîð ñòîëáöîâ
    
    checkcol = False ' Ñòàâèì ìåòêó ÷òî êîëîíêó ïðîâåðÿòü íå íóæíî
    cformat$ = "-" ' Ôîðìàò ïî óìîë÷àíèþ íå ìåíÿåì
    inf& = fn_Global_Get_Id(CalcCols, ColsNames(ind - 1)) - 1 ' Ïîëó÷àåì èíäåêñ èìåíè êîëîíêè â ñïèñêå ðàñ÷åòíûõ êîëîíîê
    If inf > -1 Then ' Ñðàâíèâàåì èìÿ îáðàáàòûâàåìîé êîëîíêè ñî ñïèñêîì ðàñ÷åòíûõ êîëîíîê
        If ColsCheck Then checkcol = True ' Åñëè ñòîèò ìåòêà î íåîáõîäèìîñòè ïðîâåðêè êîëîêíêè òî ñòàâèì ìåòêó ïðîâåðêè êîëîíêè
        If Not PickUp Then cformat = ColsFormats(inf) ' Åñëè ýòî âñòàâêà äàííûõ, òî óêàçûâàåì ôîðìàò âñòàâêè äàííûõ
    End If
    If PickUp Then ' Ïðîâåðÿåì êàêîå äåéñòâèå íóæíî ñîâåðøèòü
        DataTable(ind) = fn_Global_Get_Data(DataSheet, borders(0), borders(1), ColsNames(ind - 1), checkcol) ' Îòïðàâëÿåì äàííûå ñ ëèñòà â ìàññèâ
    Else ' Åñëè äàííûå íóæíî âñòàâèòü íà ëèñò
        Call sc_Global_Set_Data(DataSheet, borders(0), ColsNames(ind - 1), DataTable(ind), cformat, checkcol) ' Âñòàâëÿåì äàííûå íà ëèñò
    End If

Next ind

If Not PickUp Then Call sc_Global_Delete_Fantom_Row(DataSheet, ColsNames(0)) ' Ñòèðàåì ïîñëåäíþþ ïóñòóþ ñòðîêó êîòîðàÿ ïîÿâëÿåòñÿ ïîñëå âñòàâêè äàííûõ íà ëèñò

Erase borders

' -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -
Exit Sub ' Çàâåðøåíèå ðàáîòû

sc_Global_Data_Manipulate_Error: ' Èíñòðóêöèè ÷òî äåëàòü ïðè îøèáêå

Call sc_Global_Error_Log(Err, "Globals", "sc_Global_Data_Manipulate", ModuleVersion) ' Âûçîâ îáðàáîò÷èêà îøèáîê

End Sub
' - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - +
Public Sub sc_Global_String_To_Txt(ByVal text As String, _
                                   ByVal filename As String)
' Ñîçäàíî: 2020.02.27 12:05:58
' Àâòîð: dmitry.shevchenko
' <summary> Ñîõðàíèòü ñòðîêó â TXT ôàéëå </summary>
' <param name="text"> Ñòðîêà êîòîðóþ áóäåì ñîõðàíÿòü </param>
' <param name="filename"> Ïîëíûé ïóòü ê ôàéëó â êîòîðîì áóäåì ñîõðàíÿòü. Åñëè ôàéë íå ñóùåñòâóåò, òî îí áóäåò ñîçäàí </param>

On Error GoTo sc_Global_String_To_Txt_Error ' Ïðè îøèáêå ïåðåõîä ïî ìåòêå
' -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -

Set FSO = CreateObject("scripting.filesystemobject")
check = Len(Dir(filename)) > 0
Set textfile = FSO.OpenTextFile(filename, 8, True)
textfile.Write vbNewLine & text
textfile.Close
Set textfile = Nothing
Set FSO = Nothing

' -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -
Exit Sub ' Çàâåðøåíèå ðàáîòû

sc_Global_String_To_Txt_Error: ' Èíñòðóêöèè ÷òî äåëàòü ïðè îøèáêå

Call sc_Global_Error_Log(Err, "Globals", "sc_Global_String_To_Txt", ModuleVersion) ' Âûçîâ îáðàáîò÷èêà îøèáîê

End Sub
' - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - +
Public Sub sc_Global_Error_Log(ByVal errn As Object, _
                               ByVal modulename As String, _
                               ByVal procname As String, _
                               Optional ByVal MVersion As Long = 0)
' Ñîçäàíî: 2020.02.27 11:55:37
' Àâòîð: dmitry.shevchenko
' <summary> Ëîãèðîâàíèå îøèáîê </summary>
' <param name="errn"> Ïåðåõâà÷åííàÿ îøèáêà </param>
' <param name="modulename"> Íàçâàíèå ìîäåëÿ ãäå áûëà ïåðåõâà÷åíà îøèáêà </param>
' <param name="procname"> Èìÿ îáúåêòà â êîòîðîì ïåðåõâà÷åíà îøèáêà </param>
' <param name="MVersion"> Âåðñèÿ òåêóùåãî ìîäóëÿ </param>
' -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -

temp1$ = Now() & vbTab & ActiveWorkbook.Name & vbTab & Environ("COMPUTERNAME") & vbTab & Environ("USERNAME") & vbTab & modulename & vbTab & MVersion & vbTab & procname & vbTab & errn.Number & vbTab & Replace(Err.Description, vbNewLine, " | ")

'temp2$ = ThisWorkbook.Path & "\Æóðíàë îøèáîê " & Year(Now()) & "." & fn_Global_Add_Symbols(Month(Now), 2) & "." & fn_Global_Add_Symbols(Day(Now), 2) & ".txt"
temp2$ = ThisWorkbook.Path & "\Æóðíàë îøèáîê.txt"

sc_Global_String_To_Txt text:=temp1, filename:=temp2

' -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -

End Sub
' - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - +
Public Sub sc_Global_Screen_Updating(ByVal Act As Boolean)
' Ñîçäàíî: 2020.02.27 11:45:08
' Àâòîð: dmitry.shevchenko
' <summary> Óïðàâëåíèå îáíîâëåíèåì ýêðàíà </summary>
' <param name="Act"> Ìåòêà ñîâåðøàåìîãî äåéñòâèÿ </param>

On Error GoTo sc_Global_Screen_Updating_Error ' Ïðè îøèáêå ïåðåõîä ïî ìåòêå
' -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -

Application.ScreenUpdating = Act
Application.ShowWindowsInTaskbar = Act
Application.AskToUpdateLinks = Act
Application.DisplayAlerts = Act
Application.EnableEvents = Act
Application.DisplayStatusBar = Act
If Act Then
    Application.EnableCancelKey = xlInterrupt
    Application.Calculation = xlCalculationAutomatic
    Application.DisplayCommentIndicator = xlCommentAndIndicator
Else
    Application.EnableCancelKey = xlDisabled
    Application.Calculation = xlCalculationManual
    Application.DisplayCommentIndicator = xlNoIndicator
End If

' -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -
Exit Sub ' Çàâåðøåíèå ðàáîòû

sc_Global_Screen_Updating_Error: ' Èíñòðóêöèè ÷òî äåëàòü ïðè îøèáêå

Call sc_Global_Error_Log(Err, "Globals", "sc_Global_Screen_Updating", ModuleVersion) ' Âûçîâ îáðàáîò÷èêà îøèáîê

End Sub
' - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - +
Public Sub sc_Global_Delete_Fantom_Row(ByVal tSheet As Object, _
                                       ByVal ColHead As String)
' Ñîçäàíî: 2020.02.27 11:41:00
' Àâòîð: dmitry.shevchenko
' <summary> Óäàëèòü ïåðâóþ ïóñòóþ ñòðîêó ïîñëå òàáëèöû. Ïðè âñòàâêå äàííûõ íà ëèñò ïîÿâëÿåòñÿ ëèøíÿÿ ïóñòàÿ ñòðîêà </summary>
' <param name="tSheet"> Ëèñò íà êîòîðîì áóäåì óäàëÿòü ôàíòîìíóþ ñòðîêó </param>
' <param name="ColHead"> Íàçâàíèå êîëîíêè ïî êîòîðîé áóäåì îïðåäåëÿòü ãðàíèöû òàáëèöû. Êîëîíêà íå äîëæíà ñîæåðæàòü ïóñòûõ çíà÷åíèé </param>

On Error GoTo sc_Global_Delete_Fantom_Row_Error ' Ïðè îøèáêå ïåðåõîä ïî ìåòêå
' -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -

For i& = 1 To 1048576 ' Ïåðåáîð ñòðîê íà ëèñòå

    If Not tSheet.Range(i & ":" & i).Find(ColHead, , , xlWhole) Is Nothing Then Exit For ' Ïðè íàõîæäåíèè â ñòðîêå èñêëìîãî çàíÿåíèÿ âûõîäèì èç öèêëà
    
Next i

sCol& = tSheet.Range(i & ":" & i).Find(ColHead, , , xlWhole).Column ' Íàõîäèì íîìåð êîëîíêè ñ èñêîìûì çíà÷åíèåì
lRow& = tSheet.Range(tSheet.Cells(i, sCol), tSheet.Cells(1048576, sCol)).Find("").Row ' Íàõîäèì â ýòîé êîëîíêå ïóñòóþ ñòðîêó
Rows(lRow & ":" & lRow).Delete Shift:=xlUp ' óäàëÿåì ñòðîêó

' -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -
Exit Sub ' Çàâåðøåíèå ðàáîòû

sc_Global_Delete_Fantom_Row_Error: ' Èíñòðóêöèè ÷òî äåëàòü ïðè îøèáêå

Call sc_Global_Error_Log(Err, "Globals", "sc_Global_Delete_Fantom_Row", ModuleVersion) ' Âûçîâ îáðàáîò÷èêà îøèáîê

End Sub
' - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - +
Public Sub sc_Global_Check_Column(ByVal aSheet As Object, _
                                  ByVal bText As String, _
                                  ByVal cRow As Long)
' Ñîçäàíî: 2020.02.27 11:35:40
' Àâòîð: dmitry.shevchenko
' <summary> Ïðîâåðÿåò ñóùåñòâóåò ëè â òàáëèöå òàêàÿ êîëîíêà, åñëè äà, òî î÷èùàåò åå îò çíà÷åíèé </summary>
' <param name="aSheet"> Ëèñò íà êîòîòîðîì íàõîäèòñÿ òàáëèöà </param>
' <param name="bText"> Íàçâàíèå ïðîâåðÿåìîé êîëîíêè </param>
' <param name="cRow"> Íîìåð ñòðîêè íà êîòîðîé ðàñïîëîæåíà "øàïêà" òàáëèöû </param>

On Error GoTo sc_Global_Check_Column_Error ' Ïðè îøèáêå ïåðåõîä ïî ìåòêå
' -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -

If Not aSheet.Range(cRow & ":" & cRow).Find(bText, , , xlWhole) Is Nothing Then ' èùåì â óêàçàííîé ñòðîêå íóæíîå çíà÷åíèå
    
    aSheet.Range(cRow & ":" & cRow).Find(bText, , , xlWhole).EntireColumn.ClearContents ' Åñëè íàøëè êîëîíêó, òî ñòèðàåì âñå äàííûå èç íåå
    aSheet.Cells(cRow, aSheet.Range(cRow & ":" & cRow).Find("", , , xlWhole).Column).Value = bText ' Çàíîâî âïèñûâàåì íà ëèñò èìÿ êîëîíêè
        
Else ' Åñëè êîëîíêà íå ñóùåñòâóåò
    
    aSheet.Cells(cRow, aSheet.Range(cRow & ":" & cRow).Find("").Column).Value = bText ' Èùåì â óêàçàííîé ñòðîêå ïóñòóþ ÿ÷åéêó è âïèñûâàåì èì êîëîíêè
    
End If

' -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -
Exit Sub ' Çàâåðøåíèå ðàáîòû

sc_Global_Check_Column_Error: ' Èíñòðóêöèè ÷òî äåëàòü ïðè îøèáêå

Call sc_Global_Error_Log(Err, "Globals", "sc_Global_Check_Column", ModuleVersion) ' Âûçîâ îáðàáîò÷èêà îøèáîê

End Sub
' - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - +
Public Sub sc_Global_Delete_File(ByVal filename As String)
' Ñîçäàíî: 2020.02.27 11:31:56
' Àâòîð: dmitry.shevchenko
' <summary> Óäàëèòü óêàçàííûé ôàéë </summary>
' <param name="filename"> Ïîëíûé ïóòü ê ôàéëó </param>

On Error GoTo sc_Global_Delete_File_Error ' Ïðè îøèáêå ïåðåõîä ïî ìåòêå
' -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -

Kill filename ' Óäàëÿåì ôàéë

' -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -
Exit Sub ' Çàâåðøåíèå ðàáîòû

sc_Global_Delete_File_Error: ' Èíñòðóêöèè ÷òî äåëàòü ïðè îøèáêå

Call sc_Global_Error_Log(Err, "Globals", "sc_Global_Delete_File", ModuleVersion) ' Âûçîâ îáðàáîò÷èêà îøèáîê

End Sub
' - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - +
Public Sub sc_Global_File_Done(ByVal filename As String)
' Ñîçäàíî: 2020.02.27 11:29:44
' Àâòîð: dmitry.shevchenko
' <summary> Ïåðåèìåíîâàòü îáðàáîòàííóþ âûãðóçêó </summary>
' <param name="filename"> Ïîëíûòü ïóòü ê ôàéëó </param>

On Error GoTo sc_Global_File_Done_Error ' Ïðè îøèáêå ïåðåõîä ïî ìåòêå
' -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -

newname = Left(filename, Len(filename) - InStr(StrReverse(filename), "\")) & "\" & Environ("USERNAME") & " " & Right(filename, InStr(StrReverse(filename), "\") - 1) ' Íîâîå èìÿ ôàéëà
Name filename As newname ' Ïåðåèìåíîâûâàåì âñòàâëÿÿ â íà÷àëî èìåíè ôàéëà - èìÿ þçåðà îáðàáîòàâøåãî ôàéë

' -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -
Exit Sub ' Çàâåðøåíèå ðàáîòû

sc_Global_File_Done_Error: ' Èíñòðóêöèè ÷òî äåëàòü ïðè îøèáêå

Call sc_Global_Error_Log(Err, "Globals", "sc_Global_File_Done", ModuleVersion) ' Âûçîâ îáðàáîò÷èêà îøèáîê

End Sub
' - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - +
Public Sub sc_Global_Set_Data(ByVal nSheet As Object, _
                              ByVal fRow As Long, _
                              ByVal ColName As String, _
                              ByVal dTable As Variant, _
                              ByVal nFormat As String, _
                              Optional ByVal checkcol As Boolean = False)
' Ñîçäàíî: 2020.02.27 11:26:13
' Àâòîð: dmitry.shevchenko
' <summary> Âñòàâèòü äàííûå èç ìàññèâà íà ëèñò </summary>
' <param name="nSheet"> Ëèñò íà êîòîðûé áóäåì âñòàâëÿòü äàííûå </param>
' <param name="fRow"> Íîìåð ñòðîêè ñ "øàïêîé" òàáëèöû </param>
' <param name="ColName"> Èìÿ âñòàâëÿåìîãî ñòîëáöà </param>
' <param name="dTable"> Ìàññèâ äàííûõ </param>
' <param name="nFormat"> Ôîðìàò âñòàâêè </param>
' <param name="checkcol"> Ìåòêà ïðîâåðêè è î÷èñòêè ñòîëáöà </param>

On Error GoTo sc_Global_Set_Data_Error ' Ïðè îøèáêå ïåðåõîä ïî ìåòêå
' -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -

If checkcol Then Call sc_Global_Check_Column(nSheet, ColName, fRow) ' Ïðîâåðÿåì êîëîíêó åñëè ìåòêà = True

Dim cFor As Boolean: cFor = False

Dim tCol As Long: tCol = nSheet.Range(fRow & ":" & fRow).Find(ColName, , , xlWhole).Column ' Èùåì íîìåð êîëîíêè êóäà áóäåì âñòàâëÿòü äàííûå

Select Case nFormat ' Ïðîâåðÿåì ôîðìàò âñòàâëÿåìûõ äàííûõ
        Case "Text" ' Òåêñòîâûé ôîðìàò
                cformat = "@"
                cFor = True
        Case "All" ' Îáùèé ôîðìàò
                cformat = "General"
                cFor = True
        Case "Number" ' Öåëûå ÷èñëà
                cformat = "0"
                cFor = True
        Case "0.00" ' ×èñëà äî ñîòûõ
                cformat = "0.00"
                cFor = True
        Case "Date" ' Äàòà
                cformat = "m/d/yyyy"
                cFor = True
        Case "Money" ' Ôèíàíñîâûé
                cformat = "_($* #,##0.00_);_($* (#,##0.00);_($* ""-""??_);_(@_)"
                cFor = True
End Select
    
If cFor Then nSheet.Range(nSheet.Cells(fRow, tCol), nSheet.Cells(fRow + UBound(dTable) - 1, tCol)).NumberFormat = cformat ' äèàïàçîí êóäà áóäåì âñòàâëÿòü ïðåîáðàçóåì â íóæíûé ôîðìàò
nSheet.Range(nSheet.Cells(fRow, tCol), nSheet.Cells(fRow + UBound(dTable) - 1, tCol)) = dTable ' âñòàâëÿåì äàííûå

' -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -
Exit Sub ' Çàâåðøåíèå ðàáîòû

sc_Global_Set_Data_Error: ' Èíñòðóêöèè ÷òî äåëàòü ïðè îøèáêå

Call sc_Global_Error_Log(Err, "Globals", "sc_Global_Set_Data", ModuleVersion) ' Âûçîâ îáðàáîò÷èêà îøèáîê

End Sub
' - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - +
Public Sub sc_Global_Clear_Sheet(ByVal tSheet As Object, _
                                 ByVal mRow As Long)
' Ñîçäàíî: 2020.02.27 11:19:35
' Àâòîð: dmitry.shevchenko
' <summary> Î÷èñòêà ëèñòà îò äàííûõ </summary>
' <param name="tSheet"> Ëèñò íà êîòîðîì áóäåì ïðîèçâîäèòü î÷èñòêó </param>
' <param name="mRow"> Íîìåð ñòðîêè ñ êîòðîé íà÷àòü î÷èñòêó </param>

On Error GoTo sc_Global_Clear_Sheet_Error ' Ïðè îøèáêå ïåðåõîä ïî ìåòêå
' -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -

lRow& = IIf(tSheet.UsedRange.Rows.Count > mRow, tSheet.UsedRange.Rows.Count, mRow + 1)

tSheet.Rows(mRow & ":" & lRow).Delete Shift:=xlUp

' -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -
Exit Sub ' Çàâåðøåíèå ðàáîòû

sc_Global_Clear_Sheet_Error: ' Èíñòðóêöèè ÷òî äåëàòü ïðè îøèáêå

Call sc_Global_Error_Log(Err, "Globals", "sc_Global_Clear_Sheet", ModuleVersion) ' Âûçîâ îáðàáîò÷èêà îøèáîê

End Sub
' - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - +
Public Sub sc_Global_Off_All_Filters()
' Ñîçäàíî: 2020.02.27 11:10:15
' Àâòîð: dmitry.shevchenko
' <summary> Ñíÿòü âñå ôèëüòðà </summary>

On Error GoTo sc_Global_Off_All_Filters_Error ' Ïðè îøèáêå ïåðåõîä ïî ìåòêå
' -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -

If ActiveSheet.EnableAutoFilter Then ActiveSheet.ShowAllData

' -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -
Exit Sub ' Çàâåðøåíèå ðàáîòû

sc_Global_Off_All_Filters_Error: ' Èíñòðóêöèè ÷òî äåëàòü ïðè îøèáêå

Call sc_Global_Error_Log(Err, "Globals", "sc_Global_Off_All_Filters", ModuleVersion) ' Âûçîâ îáðàáîò÷èêà îøèáîê

End Sub
' - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - +
Public Sub sc_Global_Return_Filters(ByRef temp() As String)
' Ñîçäàíî: 2020.02.27 11:06:55
' Àâòîð: dmitry.shevchenko
' <summary> Âåðíóòü ôèëüòð â èñõîäíîå ñîñòîÿíèå </summary>
' <param name="temp"> Ìàññèâ ñ çíà÷åíèÿìè ôèëüòðîâ </param>

On Error GoTo sc_Global_Return_Filters_Error ' Ïðè îøèáêå ïåðåõîä ïî ìåòêå
' -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -

For i = LBound(temp) To UBound(temp)

    If temp(i) <> "" Then
        If InStr(temp(i), ",") > 0 Then
            temp1 = Split(temp(i), ",")
            ActiveSheet.UsedRange.AutoFilter Field:=i, Criteria1:=temp1, Operator:=xlFilterValues
        Else
            ActiveSheet.UsedRange.AutoFilter Field:=i, Criteria1:=temp(i)
        End If
    End If
Next i

' -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -
Exit Sub ' Çàâåðøåíèå ðàáîòû

sc_Global_Return_Filters_Error: ' Èíñòðóêöèè ÷òî äåëàòü ïðè îøèáêå

Call sc_Global_Error_Log(Err, "Globals", "sc_Global_Return_Filters", ModuleVersion) ' Âûçîâ îáðàáîò÷èêà îøèáîê

End Sub
' - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - +
Public Function fn_Global_Add_Symbols(ByVal aValue As String, _
                                      ByVal bLength As Integer, _
                                      Optional ByVal sumb As String = "0") As String
' Ñîçäàíî: 2020.02.26 18:06:21
' Àâòîð: dmitry.shevchenko
' <summary> Äîáàâèòü ê óêàçàííîìó çíà÷åíèþ â íà÷àëî ñèìâîëû </summary>
' <param name="aValue"> Çíà÷åíèå ê êîòîðîìó íóæíî äîáàâèòü ñèìâîëû </param>
' <param name="bLength"> Êîíå÷íàÿ äëèíà ñòðîêè êîòîðàÿ äîëæíà ïîëó÷èòüñÿ </param>
' <param name="sumb"> Ñèìâîë êîòîðûé áóäåì äîáàâëÿòü â íà÷àëî. Ïî óìîë÷àíèþ íîëü </param>
' <returns> Çíà÷åíèå ñ äîáàâëåííûìè ñèìâîëàìè </return>

On Error GoTo fn_Global_Add_Symbols_Error ' Ïðè îøèáêå ïåðåõîä ïî ìåòêå
' -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -

fn_Global_Add_Symbols = aValue ' Ïðèñâîèòü çíà÷åíèå

If Len(aValue) < bLength Then ' Ïðîâåðêà êîëè÷åñòâî ñèìâîëîâ

    For i = 1 To bLength - Len(aValue) ' Èíèöèàëèçàöèÿ öèêëa
    
        fn_Global_Add_Symbols = sumb & fn_Global_Add_Symbols ' Äîáàâëÿåì íóëè
        
    Next
    
End If

' -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -
Exit Function ' Çàâåðøåíèå ðàáîòû

fn_Global_Add_Symbols_Error: ' Èíñòðóêöèè ÷òî äåëàòü ïðè îøèáêå

Call sc_Global_Error_Log(Err, "Globals", "fn_Global_Add_Symbols", ModuleVersion) ' Âûçîâ îáðàáîò÷èêà îøèáîê

End Function
' - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - +
Public Function fn_Global_ExtractUniq(rng As Range) ' Èç óêàçàííîãî äèàïàçîíà èçâëå÷ü óíèêàëüíûå çíà÷åíèÿ

On Error GoTo fn_Global_ExtractUniq_Error ' Ïðè îøèáêå ïåðåõîä ïî ìåòêå
' -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -

Dim arr(), i&, S$, x

arr = Intersect(rng.Parent.UsedRange, rng).Value
On Error Resume Next
With New Collection
  For Each x In arr()
    S = Trim(x)
    If Len(S) > 0 Then
      If IsEmpty(.Item(S)) Then
        For i = 1 To .Count
          If S < .Item(i) Then Exit For
        Next
          If i > .Count Then .Add S, S Else .Add S, S, Before:=i
      End If
    End If
  Next
  ReDim arr(1 To .Count)
  For i = 1 To .Count
    arr(i) = .Item(i)
  Next
End With
fn_Global_ExtractUniq = arr()

' -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -
Exit Function ' Çàâåðøåíèå ðàáîòû ïðîöåäóðû

fn_Global_ExtractUniq_Error: ' ×òî äåëàòü ïðè îøèáêå

Call sc_Global_Error_Log(Err, "Globals", "fn_Global_ExtractUniq", ModuleVersion) ' Âûçîâ îáðàáîò÷èêà îøèáîê

End Function
' - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - +
Public Function fn_Global_Refresh_Data(ByVal DataSheet As Object, _
                                       ByVal DataTable As String, _
                                       ByVal OptionName As String, _
                                       Optional ByVal ControlTime As String = "09:00:00") As Boolean
' Ñîçäàíî: 2020.02.27 11:00:47
' Àâòîð: dmitry.shevchenko
' <summary> Îáíîâèòü òàáëèöó ïîäêëþ÷åííûõ äàííûõ </summary>
' <param name="DataSheet"> Ëèñò íà êîòîðîì ðàñïîëîæåíà òàáëèöà </param>
' <param name="DataTable"> Òàáëèöà êîòîðóþ íóæíî îáíîâèòü </param>
' <param name="OptionName"> Èìÿ îïöèè ñ ìåòêîé ïîñëåäíåãî îáíîâëåíèÿ </param>
' <param name="ControlTime"> Êîíòðîëüíîå âðåìÿ îáíîâëåíèÿ </param>
' <returns> True - äàííûå îáíîâëåíû, False - íå îáíîâëåíû </return>

On Error GoTo fn_Global_Refresh_Data_Error ' Ïðè îøèáêå ïåðåõîä ïî ìåòêå
' -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -

refreshmark$ = fn_Global_Get_Option(OptionName)
Dim refreshcheck As Boolean
Dim resreshtime As Boolean

If CDate(refreshmark) < Date Or (CDate(Now - Date) > CDate(ControlTime) And CDate(refreshmark) < CDate(ControlTime)) Then

    DataSheet.Visible = xlSheetVisible ' Äåëàåì âèäèìûì ëèñò
    DataSheet.Activate ' Ïåðåõîäèì íà ëèñò
    refreshcheck = fn_Global_Refresh_Table(Range(DataTable).ListObject.QueryTable) ' Îáíîâëÿåì òàáëèöó ñ äàííûìè
    If refreshcheck Then ' Ïðîâåðÿåì ÷òî äåéñòâèòåëüíî îáíîâèëîñü
        refreshtime = fn_Global_Set_Option(OptionName, Now()) ' Åñëè óäàëîñü îáíîâèòüñÿ òî ñîõðàíÿåì äàííûå
    End If

End If

fn_Global_Refresh_Data = True ' Ïðèñâàåâàåì âîçâðàùàåìîå çíà÷åíèå

DataSheet.Visible = xlSheetHidden ' Ñêðûâàåì ëèñò ñ ðååñòðîì

' -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -
Exit Function ' Çàâåðøåíèå ðàáîòû

fn_Global_Refresh_Data_Error: ' Èíñòðóêöèè ÷òî äåëàòü ïðè îøèáêå

Call sc_Global_Error_Log(Err, "Globals", "fn_Global_Refresh_Data", ModuleVersion) ' Âûçîâ îáðàáîò÷èêà îøèáîê

End Function
' - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - +

Public Function fn_Global_Refresh_Table(ByVal qTable As Object) As Boolean
' Ñîçäàíî: 2020.02.27 10:42:31
' Àâòîð: dmitry.shevchenko
' <summary> Îáíîâèòü òàáëèöó ïîäêëþ÷åíèÿ </summary>
' <param name="qTable"> Òàáëèöà ïîäêëþ÷åíèÿ </param>
' <returns> True - åñëè óäàëîñü îáíîâèòü, False - åñëè íå óäàëîñü </return>

fn_Global_Refresh_Table = False ' Äåôîëòíîå çíà÷åíèå
Dim try As Integer: try = 0 ' Ñ÷åò÷èê îáíîâëåíèé

On Error GoTo fn_Global_Refresh_Table_Error ' Ïðè îøèáêå ïåðåõîä ïî ìåòêå
' -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -

mainaction:

qTable.Refresh BackgroundQuery:=False ' Îáíîâëÿåì äàòû çàêàçîâ
fn_Global_Refresh_Table = True ' Óñòàíàâëèâàåì ïîëîæèòåëüíîå âîçâðàùàåìîå çíà÷åíèå

' -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -
Exit Function ' Çàâåðøåíèå ðàáîòû ïðîöåäóðû

fn_Global_Refresh_Table_Error: ' ×òî äåëàòü ïðè îøèáêå

Call sc_Global_Error_Log(Err, "Globals", "fn_Global_Refresh_Table", ModuleVersion) ' Âûçîâ îáðàáîò÷èêà îøèáîê

Application.Wait Time:=Now + TimeSerial(0, 1, 0) ' Îæèäàåì îäíó ìèíóòó
try = try + 1 ' Óâåëè÷èâàåì ñ÷åò÷èê ïîïûòîê
If try < 5 Then GoTo mainaction ' Åñëè ñîâåðøåíî ìåíåå 5 ïîïûòîê òî ïðîáóåì åùå ðàç

End Function
' - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - +
Public Function fn_Global_Get_Edges(ByVal tSheet As Object, _
                                    ByVal ColHead As String) As Variant
' Ñîçäàíî: 2020.02.27 10:42:31
' Àâòîð: dmitry.shevchenko
' <summary> Îïðåäåëèòü ãðàíèöû òàáëèöû </summary>
' <param name="tSheet"> Ëèñò íà êîòîðîì ðàñïîëîæåíà òàáëèöà </param>
' <param name="ColHead"> Èìÿ êîëîíêè ïî êîòîðîé áóäåì îïðåäåëÿòü ãðàíèöû òàáëèöû. Íå äîëæíà ñîæåðæàòü ïóñòûõ çíà÷åíèé </param>
' <returns> Ìàññèâ èç 2 ýëåìåíòîâ: âåðõíåé ãðàíèöû ñ "øàïêîé" òàáëèöû è ïåðâîé ïóñòîé ñòðîêè ïîñëå òàáëèöû </return>

On Error GoTo fn_Global_Get_Edges_Error ' Ïðè îøèáêå ïåðåõîä ïî ìåòêå
' -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -

Dim borders(1) As Long ' Ìàññèâ äëÿ çàïîìèíàíèÿ ãðàíèö òàáëèöû

For i& = 1 To 1048576 ' Ïåðåáîð ñòðîê íà óêàçàííîì ëèñòå

    If Not tSheet.Range(i & ":" & i).Find(ColHead, , , xlWhole) Is Nothing Then borders(0) = i: Exit For ' Èùåì â ñòðîêå íàçâàíèå êîëîíêè, ïðè íàõîæäåíèè çàïîìèíàåì íîìåð ñòðîêè è ïðåðûâàåì öèêë
    
Next i

sCol& = tSheet.Range(borders(0) & ":" & borders(0)).Find(ColHead, , , xlWhole).Column ' Èùåì íîìåð êîëîíêè
borders(1) = tSheet.Range(tSheet.Cells(borders(0), sCol), tSheet.Cells(1048576, sCol)).Find("").Row ' Èùåì ïóñòóþ ñòðîêó â ýòîé êîëîíêå

fn_Global_Get_Edges = borders ' Ïðèñâàåâàåì âîçâðàùàåìîìó çíà÷åíèþ ìàññèâ ñ ãðàíèöàìè òàáëèöû

' -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -
Exit Function ' Çàâåðøåíèå ðàáîòû

fn_Global_Get_Edges_Error: ' Èíñòðóêöèè ÷òî äåëàòü ïðè îøèáêå

Call sc_Global_Error_Log(Err, "Globals", "fn_Global_Get_Edges", ModuleVersion) ' Âûçîâ îáðàáîò÷èêà îøèáîê

End Function
' - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - +

Public Function fnG_FilenamesCollection(ByVal FolderPath As String, Optional ByVal Mask As String = "", Optional ByVal SearchDeep As Long = 999) As Object
    On Error Resume Next ' Çàùèòà îò îøèáîê
    Set fnG_FilenamesCollection = New Collection ' Ñîçäàåì êîëëåêöèþ äëÿ èìåí ôàéëîâ
    Set FSO = CreateObject("Scripting.FileSystemObject") ' Ñîçäàåì îáúåêò âçàèìîäåéñòâèÿ ñ ôàéëîâîé ñèñòåìîé
    fnG_GetAllFileNamesUsingFSOs FolderPath, Mask, FSO, fnG_FilenamesCollection, SearchDeep ' Ïðîèçâîäèì ïîèñê ôàéëîâ â óêàçàííîé ïàïêå, ïî óêàçàííîé ìàñêå ïîèñêà
    Set FSO = Nothing: Application.StatusBar = False ' îáíóëÿåì îáúåêò äëÿ î÷èñüêè ïàìÿòè
End Function
' - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + -
Public Function fnG_GetAllFileNamesUsingFSOs(ByVal FolderPath As String, ByVal Mask As String, ByRef FSO, ByRef FileNamesColl As Collection, ByVal SearchDeep As Long) ' Ïîèñê ôàéëîâ ïî ìàñêå â óêàçàííîé ïàïêå
    On Error Resume Next: Set curfold = FSO.GetFolder(FolderPath) ' Õàùèòà îò îøèáîê
    If Not curfold Is Nothing Then ' Ïðîâåðÿåì ÷òî ïàïêà ñóùåñòâóåò è û íåé åñòü ÷òî-òî
        For Each fil In curfold.Files ' Ïåðåáîð ýëåìååòîâ â ïàïêå
            If fil.Path Like "*" & Mask & "*" Then FileNamesColl.Add fil.Path ' Ñðàâíåíèå íàéäåíîãî ýëåìåíòà ñ ìàñêîé ïîèñêà
        Next
        SearchDeep = SearchDeep - 1 ' Óìåíüøàåì ãëóáèíó ïîèñêà
        If SearchDeep Then
            For Each sfol In curfold.SubFolders
                fnG_GetAllFileNamesUsingFSOs sfol.Path, Mask, FSO, FileNamesColl, SearchDeep
            Next
        End If
        Set fil = Nothing: Set curfold = Nothing ' Óäàëÿåì îáúåêòû î÷èùàåì ïàìÿòü
    End If
End Function
' - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - +
Public Function fn_Global_Get_Data(ByVal nSheet As Object, _
                                   ByVal fRow As Long, _
                                   ByVal lRow As Long, _
                                   ByVal ColName As String, _
                                   Optional ByVal checkcol As Boolean = False) As Variant
' Ñîçäàíî: 2020.02.27 10:32:19
' Àâòîð: dmitry.shevchenko
' <summary> Äàííûå ñ ëèñòà îòïðàâèòü â ìàññèâ </summary>
' <param name="nSheet"> Ëèñò ñ êîòîðîãî áóäåì ïîëó÷àòü äàííûå </param>
' <param name="fRow"> Ïåðâàÿ ñòðîêà íà ëèñòå ãäå øàïêà òàáëèöû </param>
' <param name="lRow"> Ïåðâàÿ ïóñòàÿ ñòðîêà ïîñëå îêîí÷àíèÿ òàáëèöû </param>
' <param name="ColName"> Èìÿ ñòîëáöà èç êîòîðîãî áóäåì áðàòü äàííûå </param>
' <param name="checkcol"> Ìàðêåð íóæíî ëè ïðîâåðÿòü íàëè÷èå êîëîíêè è î÷èùàòü åå </param>
' <returns> Äâóìåðíûé ìàññèâ äàííûõ ñ ëèñòà </return>

On Error GoTo fn_Global_Get_Data_Error ' Ïðè îøèáêå ïåðåõîä ïî ìåòêå
' -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -

If checkcol Then Call sc_Global_Check_Column(nSheet, ColName, fRow) ' Åñëè ñòîèò èíäèêàòîð ïðîâåðêè êîëîíêè, òî âûïîëíÿåì åå

tCol& = nSheet.Range(fRow & ":" & fRow).Find(ColName, , , xlWhole).Column ' Ïîëó÷àåì íîìåð êîëîíêè
fn_Global_Get_Data = nSheet.Range(nSheet.Cells(fRow, tCol), nSheet.Cells(lRow, tCol)) ' Áåðåì äàííûå

' -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -
Exit Function ' Çàâåðøåíèå ðàáîòû

fn_Global_Get_Data_Error: ' Èíñòðóêöèè ÷òî äåëàòü ïðè îøèáêå

Call sc_Global_Error_Log(Err, "Globals", "fn_Global_Get_Data", ModuleVersion) ' Âûçîâ îáðàáîò÷èêà îøèáîê

End Function
' - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - +
Public Function fn_Global_Get_Id(ByVal arr As Variant, _
                                 ByVal searchkey As String) As Long
' Ñîçäàíî: 2020.02.26 18:00:20
' Àâòîð: dmitry.shevchenko
' <summary> Ïîëó÷èòü èíäåêñ çíà÷åíèÿ â ìàññèâå </summary>
' <param name="arr"> Ìàññèâ â êîòîðîì áóäåì èñêàòü èíäåêñ ýëåìåíòà </param>
' <param name="searchkey"> Ýëåìåíò èíäåêñ êîòîðîãî áóäåì èñêàòü </param>
' <returns> Èíäåêñ ýëåìåíòà â ìàññèâå </return>

On Error GoTo fn_Global_Get_Id_Error ' Ïðè îøèáêå ïåðåõîä ïî ìåòêå
' -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -

For i& = LBound(arr) To UBound(arr) ' öèêë ïåðåáîðà ýëåìåíòîâ ìàññèâà

    If arr(i) = searchkey Then fn_Global_Get_Id = i + 1: Exit Function ' Ñðàâíåíèå ýëåíòà ñ èñêîìûì çíà÷åíèåì. Ïðè ñîâïàäåíèè âûõîä èç öèêëà. Èíäåêñ ýëåìåíòà óâåëè÷èâàåì íà 1 ò.ê. ìàññèâ íà÷èíàåòñÿ ñ 0

Next i

' -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -
Exit Function ' Çàâåðøåíèå ðàáîòû

fn_Global_Get_Id_Error: ' Èíñòðóêöèè ÷òî äåëàòü ïðè îøèáêå

Call sc_Global_Error_Log(Err, "Globals", "fn_Global_Get_Id", ModuleVersion) ' Âûçîâ îáðàáîò÷èêà îøèáîê

End Function
' - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - +
Public Function fn_Global_Set_Option(ByVal param As String, _
                                     ByVal valstring As String) As Boolean
' Ñîçäàíî: 2020.02.26 17:42:29
' Àâòîð: dmitry.shevchenko
' <summary> Ñîõðàíèòü çíà÷åíèå îïöèè. Äëÿ ýòîãî â êíèãå äîëæåí áûòü ëèñò ñ èìåíåì "Îïöèè", íà êîòîðîì â ñòîëáöå "À" äîëæíû áûòü íàçâàíèÿ îïöèé, à â ñòîëáöå "Â" - çíà÷åíèÿ </summary>
' <param name="param"> Íàçâàíèå îïöèè </param>
' <param name="valstring"> Çíà÷åíèå îïöèè </param>
' <returns> True - åñëè óäàëîñü ñîõðàíèòü çíà÷åíèå îïöèè. False - åñëè íå óäàëîñü </return>

On Error GoTo fn_Global_Set_Option_Error ' Ïðè îøèáêå ïåðåõîä ïî ìåòêå
' -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -

fn_Global_Set_Option = False ' Çíà÷åíèå ïî óìîë÷àíèþ

If Not Worksheets("Îïöèè").Range("A:A").Find(param, , , xlWhole) Is Nothing Then ' Ïîèñê òàêîé îïöèè

    Worksheets("Îïöèè").Cells(Worksheets("Îïöèè").Range("A:A").Find(param, , , xlWhole).Row, 2).Value = valstring ' Åñëè îïöèÿ íàéäåíà, òî ïðèñâàåâàåì íîâîå çíà÷íèå
    
Else

    nRow& = Worksheets("Îïöèè").Range("A:A").Find("", , , xlWhole).Row ' Åñëè îïöèÿ íå íàéäåíà, èùåì ïóñòóþ ñòðîêó
    Worksheets("Îïöèè").Cells(nRow, 1).Value = param ' Âïèñûâàåì íàçâàíèå îïöèè
    Worksheets("Îïöèè").Cells(nRow, 2).Value = valstring ' Âïèñûâàåì çíà÷åíèå îïöèè
    
End If

fn_Global_Set_Option = True ' Ïðèñâàåâàåì ïîëîæèòåëüíîå âîçâðàùàåìîå çíà÷åíèå îçíà÷àþùåå ÷òî çíà÷åíèå îïöèè ñîõðàíåíî

' -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -
Exit Function ' Çàâåðøåíèå ðàáîòû

fn_Global_Set_Option_Error: ' Èíñòðóêöèè ÷òî äåëàòü ïðè îøèáêå

Call sc_Global_Error_Log(Err, "Globals", "fn_Global_Set_Option", ModuleVersion) ' Âûçîâ îáðàáîò÷èêà îøèáîê

End Function
' - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - +
Public Function fn_Global_Get_Option(ByVal param As String) As String
' Ñîçäàíî: 2020.02.26 17:18:19
' Àâòîð: dmitry.shevchenko
' <summary> Ïîëó÷èòü çíà÷åíèå îïöèè ïî åå èìåíè. Äëÿ ýòîãî â êíèãå äîëæåí ñóùåñòâîâàòü ëèñò è èìåíåì "Îïöèè", â êîëîíêå "À" äîëæíû áûòü èìåíà îïöèé, à â êîëîíêå "Â" - çíà÷åíèÿ îïöèé </summary>
' <param name="param"> Íàçâàíèå îïöèè çíà÷åíèå êîòîðîé íóæíî ïîëó÷èòü </param>
' <returns> Ñòðîêó ñîæåðæàùóþ çíà÷åíèå îïöèè </return>

On Error GoTo fn_Global_Get_Option_Error ' Ïðè îøèáêå ïåðåõîä ïî ìåòêå
' -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -

fn_Global_Get_Option = "Îïöèÿ íå ïîëó÷åíà!" ' Çíà÷åíèå ïî óìîë÷àíèþ

fn_Global_Get_Option = Worksheets("Îïöèè").Cells(Worksheets("Îïöèè").Range("A:A").Find(param, , , xlWhole).Row, 2).Value ' Ïîèñê çíà÷åíèÿ

' -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -

Exit Function ' Çàâåðøåíèå ðàáîòû

fn_Global_Get_Option_Error: ' Èíñòðóêöèè ÷òî äåëàòü ïðè îøèáêå

Call sc_Global_Error_Log(Err, "Globals", "fn_Global_Get_Option", ModuleVersion) ' Âûçîâ îáðàáîò÷èêà îøèáîê

End Function
' - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - +
Public Function fn_Global_Open_File_Read_Only(ByVal file As String) As Boolean
' Ñîçäàíî: 2020.02.26 17:25:13
' Àâòîð: dmitry.shevchenko
' <summary> Îòêðûòü ôàéë ïîä ÷òåíèåì </summary>
' <param name="file"> Ïîëíûé ïóòü ê ôàéëó </param>
' <returns> True - åñëè ïîëó÷èëîñü îòêðûòü ôàéë. False - åñëè íå ïîëó÷èëîñü </return>

On Error GoTo fn_Global_Open_File_Read_Only_Error ' Ïðè îøèáêå ïåðåõîä ïî ìåòêå
' -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -

fn_Global_Open_File_Read_Only = False ' Çíà÷åíèå ïî óìîë÷àíèþ äëÿ ïðîâåðêè îòêðûòèÿ ôàéëà

Workbooks.Open filename:=file, Format:=6, Delimiter:=";", Local:=True, ReadOnly:=True ' Îòêðûâàåì ôàéë ïîä ÷òåíèåì

fn_Global_Open_File_Read_Only = True ' Çíà÷åíèå äëÿ ïðîâåðêè îòêðûòèÿ ôàéëà

' -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -
Exit Function ' Çàâåðøåíèå ðàáîòû

fn_Global_Open_File_Read_Only_Error: ' Èíñòðóêöèè ÷òî äåëàòü ïðè îøèáêå

Call sc_Global_Error_Log(Err, "Globals", "fn_Global_Open_File_Read_Only", ModuleVersion) ' Âûçîâ îáðàáîò÷èêà îøèáîê

End Function
' - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - +
Public Function fn_Global_Filter_Vals() As Variant
' Ñîçäàíî: 2020.02.26 17:09:26
' Àâòîð: dmitry.shevchenko
' <summary> Ïîëó÷èòü ñïèñîê çíà÷åíèé óñòàíîâëåííûõ ôèëüòðîâ </summary>
' <returns> Ìàññèâ ñòðîê ñîäåðæàùèé çíà÷åíèÿ óñòàíîâëåííûõ ôèëüòðîâ. Ðàçìåð ìàññèâà áóäåò ñîîòâåòñòâîâàòü êîëè÷åñòâó êîëîíîê. Åñëè çíà÷åíèé íåñêîëüêî, òî îíè áóäóò ðàçäåëåíû çàïÿòîé ñ ïðîáåëîì </return>

On Error GoTo fn_Global_Filter_Vals_Error ' Ïðè îøèáêå ïåðåõîä ïî ìåòêå
' -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -

Dim fil As Object: Set fil = ActiveSheet.AutoFilter

ReDim vals(fil.Filters.Count) As String

Dim i As Integer: i = 0

For Each tfil In fil.Filters
    On Error Resume Next
    temp = ""
    temp = tfil.Criteria1
    temp2 = ""
    temp2 = tfil.Criteria2
    i = i + 1
    If TypeName(temp) = "Variant()" Then
        For zx& = LBound(temp) To UBound(temp)
        If vals(i) = "" Then
            vals(i) = temp(zx)
        Else
            vals(i) = vals(i) & "," & temp(zx)
        End If
        Next zx
    Else
        vals(i) = temp
        If temp2 <> "" Then vals(i) = vals(i) & "," & temp2
    End If

    
Next

fn_Global_Filter_Vals = vals

' -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -
Exit Function ' Çàâåðøåíèå ðàáîòû

fn_Global_Filter_Vals_Error: ' Èíñòðóêöèè ÷òî äåëàòü ïðè îøèáêå

Call sc_Global_Error_Log(Err, "Globals", "fn_Global_Filter_Vals", ModuleVersion) ' Âûçîâ îáðàáîò÷èêà îøèáîê

End Function
' - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - +
Public Function fn_Global_Between_To_Dates(ByVal CheckDate As String, _
                                           ByVal FirstDate As String, _
                                           ByVal SecondDate As String) As Variant
' Ñîçäàíî: 2020.03.05 14:37:34
' Àâòîð: dmitry.shevchenko
' <summary> Ñðàâíåíèå äàò </summary>
' <param name="CheckDate"> Ïðîâåðÿåìàÿ äàòà </param>
' <param name="FirstDate"> Äàòà íà÷àëà </param>
' <param name="SecondDate"> Äàòà îêîí÷àíèÿ </param>
' <returns> Ìàññèâ èç äâóõ ýëåìåíòîâ - True/False è êîììåíòàðèÿ </return>

On Error GoTo fn_Global_Between_To_Dates_Error ' Ïðè îøèáêå ïåðåõîä ïî ìåòêå
' -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -

ReDim result(1 To 2) As Variant: result(1) = False: result(2) = "Ïî óìîë÷àíèþ"

If CDate(CheckDate) < CDate(FirstDate) Then
    result(2) = "Ðàíî"
ElseIf CDate(CheckDate) > CDate(SecondDate) Then
    result(2) = "Ïîçäíî"
Else
    result(1) = True
    result(2) = "Îê"
End If

fn_Global_Between_To_Dates = result

' -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -
Exit Function ' Çàâåðøåíèå ðàáîòû

fn_Global_Between_To_Dates_Error: ' Èíñòðóêöèè ÷òî äåëàòü ïðè îøèáêå

Call sc_Global_Error_Log(Err, "Globals", "fn_Global_Between_To_Dates", ModuleVersion) ' Âûçîâ îáðàáîò÷èêà îøèáîê

End Function
' - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - + - +

